% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adjust.R
\name{adjust}
\alias{adjust}
\title{changes the elements of basic blocks used by rejustify API}
\usage{
adjust(block, column = NULL, id = NULL, items = NULL)
}
\arguments{
\item{block}{A data structure to be changed. Currently supported structures include \code{structure},
\code{default} and \code{keys}.}

\item{column}{The data column (or raw in case of horizontal datasets) to be adjusted. Vector values are supported.}

\item{id}{The identifier of the specific element to be changed. Currently it should be only used in \code{structure}
with multi-line headers (see \code{analyze} for details).}

\item{items}{Specific items to be changed with the values to be assigned. If the values are set to \code{NA}, \code{NULL}
or \code{""}, the specific item will be removed from the block (only for \code{kets}). Items may be multi-valued.}
}
\value{
adjusted structure of the \code{df} data set
}
\description{
The purpose of the function is to provide a possibly seamless
way of adjusting blocks used in communication with rejustify API, in particular with the
\code{fill} endpoint. The blocks include: data structure (\code{structure}), default values
(\code{default}) and matching keys (\code{kets}). Items may only be deleted for specific matching
dimensions proposed by \code{keys}.

Upon changes in \code{structure}, the corresponding \code{p_class} or \code{p_data} will be set to -1.
This is the way to inform API that the original \code{structure} has changed and in case the \code{learn}
option is enabled, the new values will be used to train the algorithms. If \code{learn} is disabled, information
will not be stored by the API but the changes will be recognized in the current API call.
}
\examples{
#API setup
setCurl()

#register token/email
register(token = "YOUR_TOKEN", email = "YOUR_EMAIL")

#sample data set
df <- data.frame(year = c("2009", "2010", "2011"),
                 country = c("Poland", "Poland", "Poland"),
                 `gross domestic product` = c(NA, NA, NA),
                 check.names = FALSE, stringsAsFactors = FALSE)

#endpoint analyze
st <- analyze(df)

#adjust structures
st <- adjust(st, column = 2, items = list('feature' = 'country'))
st <- adjust(st, column = 3, items = list('provider' = 'IMF', 'table' = 'WEO'))

#endpoint fill
df1 <- fill(df, st)

#adjust default values
default <- adjust(df1$default, column = 3, items = list('Time Dimension' = '2013') )

#adjust keys
keys <- adjust(df1$keys, column = 3, items = list('id.x' = c(3,1,2) , 'id.y' = c(1,2,3) ) )
keys <- adjust(df1$keys, column = 3, items = list('id.x' = 3 , 'id.y' = NA ) )

}
